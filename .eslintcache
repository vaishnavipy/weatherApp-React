[{"/Users/vaishnaviravichandran/Desktop/React/weather-app/src/index.js":"1","/Users/vaishnaviravichandran/Desktop/React/weather-app/src/App.js":"2","/Users/vaishnaviravichandran/Desktop/React/weather-app/src/weatherBoard.js":"3","/Users/vaishnaviravichandran/Desktop/React/weather-app/src/weatherIcon.js":"4"},{"size":395,"mtime":1609260402359,"results":"5","hashOfConfig":"6"},{"size":1339,"mtime":1609300973583,"results":"7","hashOfConfig":"6"},{"size":6877,"mtime":1609617093567,"results":"8","hashOfConfig":"6"},{"size":1179,"mtime":1609294987944,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"gdwmyf",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"/Users/vaishnaviravichandran/Desktop/React/weather-app/src/index.js",[],["22","23"],"/Users/vaishnaviravichandran/Desktop/React/weather-app/src/App.js",["24"],"\nimport './App.css';\nimport React,{useState,useEffect} from \"react\"\nimport WeatherBoard from \"./weatherBoard\"\n\nfunction App() {\n\n  const [input,setInput] = useState()\n\n  const [city,setCity] = useState(\"\")\n\n  const [cityInfo,setCityInfo] = useState(\"\")  \n\n  const [weatherArr,setWeatherArr] = useState([])\n\n  const [error,setError] = useState(\"\")\n\n  function hanldeChange(event){\n    setInput(event.target.value)\n  }\n\n  function handleEnter(event){\n    if(event.keyCode === 13){\n      console.log(\"enter\")\n      setCity(input)\n      console.log(input)\n    }\n  }\n\n  useEffect(()=>{\n    console.log(city)\n  if(city){\n      \n    fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=5ada776395213f1480b5effb09d7710d`)\n    .then(response => response.json())\n    .then(data => { \n      if(data.cod == \"200\") {setWeatherArr([...data.list])\n        setCityInfo(data.city)\n        setError(\"\")\n      }\n        else{ setError(\"Oops, We cannot find the city. Try again..\")}\n        })\n        }\n    },[city])\n\n\n  return (\n    <div className=\"app-container\" >\n      <input type=\"text\" className=\"search\" value={input} onChange={hanldeChange} onKeyDown={handleEnter}  placeholder=\"Enter city name..\"/>\n      <WeatherBoard cityInfo={cityInfo} weatherArr={weatherArr} error={error}/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/vaishnaviravichandran/Desktop/React/weather-app/src/weatherBoard.js",["25","26","27","28","29","30","31","32","33","34","35","36","37"],"import React, { Fragment, useEffect, useState } from \"react\"\n\n\nimport iconCodeMapping from './weatherIcon';\n\n\n\nfunction WeatherBoard({weatherArr,cityInfo,error}){\n\n    const [date,setDate] = useState(new Date().getDate()+1)\n\n    const [selectedDates,setselectedDates] = useState(\"\");\n\n    const [selectedDatesElm,setSelectedDatesElm] = useState(\"\")\n\n    const [displayTime,setDisplayTime]= useState(\"\")\n   \n    const [days,setDays] = useState([])\n\n    const [divDayGrid,setDivDayGrid] = useState(\"\")\n\n    const weekday =[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n\n    const timeLabels =[\"2 am\",\"5 am\",\"8 am\",\"11 am\",\"2 pm\",\"5 pm\",\"8 pm\",\"11 pm\"]\n       \n    //On Component Mount setup the days array, with the next 5 days of the week starting from tomorrow\n    useEffect(()=>{\n       \n        if(days.length == 0){\n        for(let i=1;i< 6;i++){\n            let nextDate = new Date()\n            let todaysDate = new Date()\n            nextDate.setDate( todaysDate.getDate() + i)\n            let tempDate = nextDate.getDate()\n            let tempDay =nextDate.getDay()\n           console.log(nextDate.getDay(),nextDate.getDate(),nextDate.getFullYear(),i,\"hi\")\n            setDays(prevDay => [...prevDay,{dayCode:tempDay,date:tempDate} ])\n           \n        }\n    }\n\n    setDisplayTime(0)\n    },[])\n\n   \n    // Whenever user chooses different date , show data mathcing the date\n    useEffect(()=>{\n      \n     if(weatherArr.length != 0){\n        \n\n       const temp=  weatherArr.filter(obj => {\n             return   ((obj.dt_txt.split(\" \"))[0].slice(-2)) == date\n            })\n       console.log(temp)\n            setselectedDates(temp)\n       \n        }\n       \n    },[date,weatherArr])\n\n    //Once you get the weather Array , fill in the bottom weather cards for next 5 days\n    useEffect(()=>{\n     \n        if(days.length !== 0 && weatherArr.length !== 0){\n            let matchDate = \" \" \n         let tempDayGrid =   weatherArr.map((obj,i) => {\n                var d = ((obj.dt_txt.split(\" \"))[0].slice(-2))\n               \n              \n                if(matchDate !== d && d != new Date().getDate() ){\n                   \n                  \n                    matchDate =  ((obj.dt_txt.split(\" \"))[0].slice(-2))\n               \n                    return (\n                    <div id={matchDate} onClick={chooseDay} className=\"choose-day-div\">\n                        <p className=\"day\">{weekday[days.filter(elm => elm.date == d).map(elm => elm.dayCode)]}</p>\n                        <div className=\"weather-card-icon\"> <img src={iconCodeMapping[obj.weather[0].icon]} /></div>\n                        <p className=\"max-temp\">{obj.main.temp_max}<span>&#176;</span>C</p>\n                        <p className=\"min-temp\">{obj.main.temp_min}<span>&#176;</span>C</p>\n                    </div>)\n                }\n                \n            })\n            tempDayGrid = tempDayGrid.filter(obj => obj)\n\n            if(tempDayGrid.length >5){\n              \n                tempDayGrid.pop()\n                \n            }\n            setDivDayGrid(tempDayGrid)\n        }\n        \n    },[days,weatherArr])\n\n\n    // Helps chnage the selected display time\n    function selectedDisplayTime(index){\n        setDisplayTime(index)\n    }\n    //Helps change the day from the weather card at the cottom\n    function chooseDay(e){\n        console.log(e.currentTarget.id,\"id\")\n        setDate(e.currentTarget.id)\n       \n    }\n\n    // Based on the date selected and the display time selected, the display changes\n    useEffect(()=>{\n        if(selectedDates){\n         \n      const tempSelectedDatesElm =  selectedDates.map((obj,i) => {\n        var d = ((obj.dt_txt.split(\" \"))[0].slice(-2))\n               \n              \n          return  (\n          <div className=\"day-weather-container\">\n              \n                <p className=\"weather-desc\"><strong>{weekday[days.filter(elm => elm.date == d).map(elm => elm.dayCode)]} {timeLabels[displayTime]}</strong>, {obj.weather[0].description}</p>\n                <div className=\"inner-container\">\n                    <div className=\"left\">\n                        <div className=\"main-temp-img-grid\">\n                            <div className=\"main-icon\"><img src={iconCodeMapping[obj.weather[0].icon]} /></div>\n                            <h1>{obj.main.temp}<span className=\"small-celsius\">&#176; C</span></h1>\n                        </div>\n                      \n                    </div>\n                    <div className=\"right\">\n                        <p>Clouds:{obj.clouds.all}%</p>\n                        <p>Humidity:{obj.main.humidity}%</p>\n                        <p>Wind:{obj.wind.speed}m/s</p>\n                    </div>\n                </div>\n                <TimeRuler times={selectedDates} selectedDisplayTime={selectedDisplayTime} displayTime={displayTime}/>\n            </div> ) \n        })\n        setSelectedDatesElm(tempSelectedDatesElm)\n    }\n       \n    },[displayTime,selectedDates])\n   \n\n    \n    return(\n    <div className=\"weather-board\">\n        {error ? error :  \n        \n        <Fragment>\n        \n        {cityInfo &&   <h3 className=\"city\">{cityInfo.name},{cityInfo.country} </h3> }\n        \n        {selectedDatesElm && selectedDatesElm[displayTime]}\n\n        <div className=\"div-grid\">\n            {divDayGrid && divDayGrid}\n        </div> \n        </Fragment>\n\n        }\n\n       \n\n    </div>)\n}\n\n\n\n\n// Time slider componnet, to display the differnt hourly times\nfunction TimeRuler({times,selectedDisplayTime,displayTime}){\n    const [selectedTime,setSelectedTime] = useState(displayTime)\n\n    useEffect(()=>{\n        setSelectedTime(displayTime)\n    },[displayTime])\n\n    const margin = 100/times.length;\n\n    const labelMargin = margin;\n\n    function handleTimeChange(e){\n        if(e.target.id){\n        selectedDisplayTime(e.target.id)\n        setSelectedTime(e.target.id)\n        }\n    }\n  \n    const timeLabels =[\n        {\"00\":\"2am\"},\n        {\"03\":\"5 am\"},\n        {\"06\":\"8 am\"},\n        {\"09\":\"11 am\"},\n        {\"12\": \"2 pm\"},\n        {\"15\": \"5 pm\"},\n        {\"18\": \"8 pm\"},\n        {\"21\": \"11 pm\"}\n    ]\n\n    const labels = times.map((elm,i) => {\n        return(<div key={i} id={i} style={{left:`${i*labelMargin}%`}}  className=\"label\">{timeLabels.map(obj => obj[((elm.dt_txt.split(\" \"))[1].slice(0,2))])}</div>)\n    })\n\n    const circle = times.map((elm,i) => {\n        if( i == selectedTime ){\n        return(<div key={i} id={i} style={{left:`${i*margin}%`}}  className=\"circles active\" onClick={handleTimeChange}></div>) }\n        else{\n            return(<div key={i} id={i} style={{left:`${i*margin}%`}}  className=\"circles\" onClick={handleTimeChange}></div>)    \n        }\n    })\n\n    return(\n    <div className=\"time-ruler\">\n            {circle}\n           <hr className=\"hr\"/>\n           {labels}\n    </div>)\n\n\n}\n\nexport default WeatherBoard;","/Users/vaishnaviravichandran/Desktop/React/weather-app/src/weatherIcon.js",["38"],"const iconPath = `http://www.gstatic.com/images/icons/material/apps/weather/2x/`;\n\nexport default  {\n  '01d': `${iconPath}/mostly_sunny_light_color_96dp.png`,\n  '01n': `${iconPath}/mostly_clear_night_light_color_96dp.png`,\n  '02d': `${iconPath}/partly_cloudy_light_color_96dp.png`,\n  '02n': `${iconPath}/partly_cloudy_night_light_color_96dp.png`,\n  '03d': `${iconPath}/cloudy_light_color_96dp.png`,\n  '03n': `${iconPath}/cloudy_light_color_96dp.png`,\n  '04d': `${iconPath}/cloudy_light_color_96dp.png`,\n  '04n': `${iconPath}/cloudy_light_color_96dp.png`,\n  '09d': `${iconPath}/drizzle_light_color_96dp.png`,\n  '09n': `${iconPath}/drizzle_light_color_96dp.png`,\n  '10d': `${iconPath}/showers_rain_light_color_96dp.png`,\n  '10n': `${iconPath}/showers_rain_light_color_96dp.png`,\n  '11d': `${iconPath}/strong_tstorms_light_color_96dp.png`,\n  '11n': `${iconPath}/isolated_scattered_tstorms_night_light_color_96dp.png`,\n  '13d': `${iconPath}/wintry_mix_rain_snow_light_color_96dp.png`,\n  '13n': `${iconPath}/wintry_mix_rain_snow_light_color_96dp.png`,\n  '50d': `${iconPath}/haze_fog_dust_smoke_light_color_96dp.png`,\n  '50n': `${iconPath}/haze_fog_dust_smoke_light_color_96dp.png`,\n};",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":37,"column":19,"nodeType":"45","messageId":"46","endLine":37,"endColumn":21},{"ruleId":"43","severity":1,"message":"44","line":29,"column":24,"nodeType":"45","messageId":"46","endLine":29,"endColumn":26},{"ruleId":"47","severity":1,"message":"48","line":43,"column":7,"nodeType":"49","endLine":43,"endColumn":9,"suggestions":"50"},{"ruleId":"43","severity":1,"message":"51","line":49,"column":27,"nodeType":"45","messageId":"46","endLine":49,"endColumn":29},{"ruleId":"43","severity":1,"message":"44","line":53,"column":62,"nodeType":"45","messageId":"46","endLine":53,"endColumn":64},{"ruleId":"52","severity":1,"message":"53","line":67,"column":53,"nodeType":"54","messageId":"55","endLine":67,"endColumn":55},{"ruleId":"43","severity":1,"message":"51","line":71,"column":41,"nodeType":"45","messageId":"46","endLine":71,"endColumn":43},{"ruleId":"43","severity":1,"message":"44","line":78,"column":81,"nodeType":"45","messageId":"46","endLine":78,"endColumn":83},{"ruleId":"56","severity":1,"message":"57","line":79,"column":61,"nodeType":"58","endLine":79,"endColumn":111},{"ruleId":"47","severity":1,"message":"59","line":96,"column":7,"nodeType":"49","endLine":96,"endColumn":24,"suggestions":"60"},{"ruleId":"43","severity":1,"message":"44","line":121,"column":90,"nodeType":"45","messageId":"46","endLine":121,"endColumn":92},{"ruleId":"56","severity":1,"message":"57","line":125,"column":56,"nodeType":"58","endLine":125,"endColumn":106},{"ruleId":"47","severity":1,"message":"61","line":142,"column":7,"nodeType":"49","endLine":142,"endColumn":34,"suggestions":"62"},{"ruleId":"43","severity":1,"message":"44","line":206,"column":15,"nodeType":"45","messageId":"46","endLine":206,"endColumn":17},{"ruleId":"63","severity":1,"message":"64","line":3,"column":1,"nodeType":"65","endLine":22,"endColumn":3},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'days.length'. Either include it or remove the dependency array.","ArrayExpression",["68"],"Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'weekday'. Either include it or remove the dependency array.",["69"],"React Hook useEffect has missing dependencies: 'days', 'timeLabels', and 'weekday'. Either include them or remove the dependency array.",["70"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [days.length]",{"range":"77","text":"78"},"Update the dependencies array to be: [days, weatherArr, weekday]",{"range":"79","text":"80"},"Update the dependencies array to be: [days, displayTime, selectedDates, timeLabels, weekday]",{"range":"81","text":"82"},[1325,1327],"[days.length]",[3124,3141],"[days, weatherArr, weekday]",[4960,4987],"[days, displayTime, selectedDates, timeLabels, weekday]"]