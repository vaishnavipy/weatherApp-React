{"version":3,"sources":["weatherIcon.js","weatherBoard.js","App.js","index.js"],"names":["iconPath","TimeRuler","times","selectedDisplayTime","displayTime","useState","selectedTime","setSelectedTime","useEffect","margin","length","labelMargin","handleTimeChange","e","target","id","timeLabels","labels","map","elm","i","style","left","className","obj","dt_txt","split","slice","circle","onClick","WeatherBoard","weatherArr","cityInfo","error","Date","getDate","date","setDate","selectedDates","setselectedDates","selectedDatesElm","setSelectedDatesElm","setDisplayTime","days","setDays","divDayGrid","setDivDayGrid","weekday","index","chooseDay","console","log","currentTarget","nextDate","todaysDate","tempDate","tempDay","getDay","getFullYear","prevDay","dayCode","temp","filter","matchDate","tempDayGrid","d","src","iconCodeMapping","weather","icon","main","temp_max","temp_min","pop","tempSelectedDatesElm","description","clouds","all","humidity","wind","speed","name","country","App","input","setInput","city","setCity","setCityInfo","setWeatherArr","setError","fetch","then","response","json","data","cod","list","type","value","onChange","event","onKeyDown","keyCode","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9bfd8ecb.chunk.js","sourcesContent":["const iconPath = `http://www.gstatic.com/images/icons/material/apps/weather/2x/`;\n\nexport default  {\n  '01d': `${iconPath}/mostly_sunny_light_color_96dp.png`,\n  '01n': `${iconPath}/mostly_clear_night_light_color_96dp.png`,\n  '02d': `${iconPath}/partly_cloudy_light_color_96dp.png`,\n  '02n': `${iconPath}/partly_cloudy_night_light_color_96dp.png`,\n  '03d': `${iconPath}/cloudy_light_color_96dp.png`,\n  '03n': `${iconPath}/cloudy_light_color_96dp.png`,\n  '04d': `${iconPath}/cloudy_light_color_96dp.png`,\n  '04n': `${iconPath}/cloudy_light_color_96dp.png`,\n  '09d': `${iconPath}/drizzle_light_color_96dp.png`,\n  '09n': `${iconPath}/drizzle_light_color_96dp.png`,\n  '10d': `${iconPath}/showers_rain_light_color_96dp.png`,\n  '10n': `${iconPath}/showers_rain_light_color_96dp.png`,\n  '11d': `${iconPath}/strong_tstorms_light_color_96dp.png`,\n  '11n': `${iconPath}/isolated_scattered_tstorms_night_light_color_96dp.png`,\n  '13d': `${iconPath}/wintry_mix_rain_snow_light_color_96dp.png`,\n  '13n': `${iconPath}/wintry_mix_rain_snow_light_color_96dp.png`,\n  '50d': `${iconPath}/haze_fog_dust_smoke_light_color_96dp.png`,\n  '50n': `${iconPath}/haze_fog_dust_smoke_light_color_96dp.png`,\n};","import React, { Fragment, useEffect, useState } from \"react\"\n\n\nimport iconCodeMapping from './weatherIcon';\n\n\n\nfunction WeatherBoard({weatherArr,cityInfo,error}){\n\n    const [date,setDate] = useState(new Date().getDate()+1)\n\n    const [selectedDates,setselectedDates] = useState(\"\");\n\n    const [selectedDatesElm,setSelectedDatesElm] = useState(\"\")\n\n    const [displayTime,setDisplayTime]= useState(\"\")\n   \n    const [days,setDays] = useState([])\n\n    const [divDayGrid,setDivDayGrid] = useState(\"\")\n\n    const weekday =[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n\n    const timeLabels =[\"2 am\",\"5 am\",\"8 am\",\"11 am\",\"2 pm\",\"5 pm\",\"8 pm\",\"11 pm\"]\n       \n    //On Component Mount setup the days array, with the next 5 days of the week starting from tomorrow\n    useEffect(()=>{\n       \n        if(days.length == 0){\n        for(let i=1;i< 6;i++){\n            let nextDate = new Date()\n            let todaysDate = new Date()\n            nextDate.setDate( todaysDate.getDate() + i)\n            let tempDate = nextDate.getDate()\n            let tempDay =nextDate.getDay()\n           console.log(nextDate.getDay(),nextDate.getDate(),nextDate.getFullYear(),i,\"hi\")\n            setDays(prevDay => [...prevDay,{dayCode:tempDay,date:tempDate} ])\n           \n        }\n    }\n\n    setDisplayTime(0)\n    },[])\n\n   \n    // Whenever user chooses different date , show data mathcing the date\n    useEffect(()=>{\n      \n     if(weatherArr.length != 0){\n        \n\n       const temp=  weatherArr.filter(obj => {\n             return   ((obj.dt_txt.split(\" \"))[0].slice(-2)) == date\n            })\n       console.log(temp)\n            setselectedDates(temp)\n       \n        }\n       \n    },[date,weatherArr])\n\n    //Once you get the weather Array , fill in the bottom weather cards for next 5 days\n    useEffect(()=>{\n     \n        if(days.length !== 0 && weatherArr.length !== 0){\n            let matchDate = \" \" \n         let tempDayGrid =   weatherArr.map((obj,i) => {\n                var d = ((obj.dt_txt.split(\" \"))[0].slice(-2))\n               \n              \n                if(matchDate !== d && d != new Date().getDate() ){\n                   \n                  \n                    matchDate =  ((obj.dt_txt.split(\" \"))[0].slice(-2))\n               \n                    return (\n                    <div id={matchDate} onClick={chooseDay} className=\"choose-day-div\">\n                        <p className=\"day\">{weekday[days.filter(elm => elm.date == d).map(elm => elm.dayCode)]}</p>\n                        <div className=\"weather-card-icon\"> <img src={iconCodeMapping[obj.weather[0].icon]} /></div>\n                        <p className=\"max-temp\">{obj.main.temp_max}<span>&#176;</span>C</p>\n                        <p className=\"min-temp\">{obj.main.temp_min}<span>&#176;</span>C</p>\n                    </div>)\n                }\n                \n            })\n            tempDayGrid = tempDayGrid.filter(obj => obj)\n\n            if(tempDayGrid.length >5){\n              \n                tempDayGrid.pop()\n                \n            }\n            setDivDayGrid(tempDayGrid)\n        }\n        \n    },[days,weatherArr])\n\n\n    // Helps chnage the selected display time\n    function selectedDisplayTime(index){\n        setDisplayTime(index)\n    }\n    //Helps change the day from the weather card at the cottom\n    function chooseDay(e){\n        console.log(e.currentTarget.id,\"id\")\n        setDate(e.currentTarget.id)\n       \n    }\n\n    // Based on the date selected and the display time selected, the display changes\n    useEffect(()=>{\n        if(selectedDates){\n         \n      const tempSelectedDatesElm =  selectedDates.map((obj,i) => {\n        var d = ((obj.dt_txt.split(\" \"))[0].slice(-2))\n               \n              \n          return  (\n          <div className=\"day-weather-container\">\n              \n                <p className=\"weather-desc\"><strong>{weekday[days.filter(elm => elm.date == d).map(elm => elm.dayCode)]} {timeLabels[displayTime]}</strong>, {obj.weather[0].description}</p>\n                <div className=\"inner-container\">\n                    <div className=\"left\">\n                        <div className=\"main-temp-img-grid\">\n                            <div className=\"main-icon\"><img src={iconCodeMapping[obj.weather[0].icon]} /></div>\n                            <h1>{obj.main.temp}<span className=\"small-celsius\">&#176; C</span></h1>\n                        </div>\n                      \n                    </div>\n                    <div className=\"right\">\n                        <p>Clouds:{obj.clouds.all}%</p>\n                        <p>Humidity:{obj.main.humidity}%</p>\n                        <p>Wind:{obj.wind.speed}m/s</p>\n                    </div>\n                </div>\n                <TimeRuler times={selectedDates} selectedDisplayTime={selectedDisplayTime} displayTime={displayTime}/>\n            </div> ) \n        })\n        setSelectedDatesElm(tempSelectedDatesElm)\n    }\n       \n    },[displayTime,selectedDates])\n   \n\n    \n    return(\n    <div className=\"weather-board\">\n        {error ? error :  \n        \n        <Fragment>\n        \n        {cityInfo &&   <h3 className=\"city\">{cityInfo.name},{cityInfo.country} </h3> }\n        \n        {selectedDatesElm && selectedDatesElm[displayTime]}\n\n        <div className=\"div-grid\">\n            {divDayGrid && divDayGrid}\n        </div> \n        </Fragment>\n\n        }\n\n       \n\n    </div>)\n}\n\n\n\n\n// Time slider componnet, to display the differnt hourly times\nfunction TimeRuler({times,selectedDisplayTime,displayTime}){\n    const [selectedTime,setSelectedTime] = useState(displayTime)\n\n    useEffect(()=>{\n        setSelectedTime(displayTime)\n    },[displayTime])\n\n    const margin = 100/times.length;\n\n    const labelMargin = margin;\n\n    function handleTimeChange(e){\n        if(e.target.id){\n        selectedDisplayTime(e.target.id)\n        setSelectedTime(e.target.id)\n        }\n    }\n  \n    const timeLabels =[\n        {\"00\":\"2am\"},\n        {\"03\":\"5 am\"},\n        {\"06\":\"8 am\"},\n        {\"09\":\"11 am\"},\n        {\"12\": \"2 pm\"},\n        {\"15\": \"5 pm\"},\n        {\"18\": \"8 pm\"},\n        {\"21\": \"11 pm\"}\n    ]\n\n    const labels = times.map((elm,i) => {\n        return(<div key={i} id={i} style={{left:`${i*labelMargin}%`}}  className=\"label\">{timeLabels.map(obj => obj[((elm.dt_txt.split(\" \"))[1].slice(0,2))])}</div>)\n    })\n\n    const circle = times.map((elm,i) => {\n        if( i == selectedTime ){\n        return(<div key={i} id={i} style={{left:`${i*margin}%`}}  className=\"circles active\" onClick={handleTimeChange}></div>) }\n        else{\n            return(<div key={i} id={i} style={{left:`${i*margin}%`}}  className=\"circles\" onClick={handleTimeChange}></div>)    \n        }\n    })\n\n    return(\n    <div className=\"time-ruler\">\n            {circle}\n           <hr className=\"hr\"/>\n           {labels}\n    </div>)\n\n\n}\n\nexport default WeatherBoard;","\nimport './App.css';\nimport React,{useState,useEffect} from \"react\"\nimport WeatherBoard from \"./weatherBoard\"\n\nfunction App() {\n\n  const [input,setInput] = useState()\n\n  const [city,setCity] = useState(\"\")\n\n  const [cityInfo,setCityInfo] = useState(\"\")  \n\n  const [weatherArr,setWeatherArr] = useState([])\n\n  const [error,setError] = useState(\"\")\n\n  function hanldeChange(event){\n    setInput(event.target.value)\n  }\n\n  function handleEnter(event){\n    if(event.keyCode === 13){\n      console.log(\"enter\")\n      setCity(input)\n      console.log(input)\n    }\n  }\n\n  useEffect(()=>{\n    console.log(city)\n  if(city){\n      \n    fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=5ada776395213f1480b5effb09d7710d`)\n    .then(response => response.json())\n    .then(data => { \n      if(data.cod == \"200\") {setWeatherArr([...data.list])\n        setCityInfo(data.city)\n        setError(\"\")\n      }\n        else{ setError(\"Oops, We cannot find the city. Try again..\")}\n        })\n        }\n    },[city])\n\n\n  return (\n    <div className=\"app-container\" >\n      <input type=\"text\" className=\"search\" value={input} onChange={hanldeChange} onKeyDown={handleEnter}  placeholder=\"Enter city name..\"/>\n      <WeatherBoard cityInfo={cityInfo} weatherArr={weatherArr} error={error}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}